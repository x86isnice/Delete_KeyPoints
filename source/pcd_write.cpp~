#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <cmath>
#include <ctime>
using namespace std;

#if 0
int main (int argc, char** argv)
{
            srand(time(NULL));
            pcl::PointCloud<pcl::PointXYZ> cloud;
              // Fill in the cloud data
              cloud.width    = 1000;
              cloud.height   = 1000;
              cloud.is_dense = false;
              cloud.points.resize(cloud.width * cloud.height);

              for (size_t i = 0; i < cloud.width; i++)
              {
                for (std::size_t j = 0; j < cloud.height; j++ )
		  {
		    std::size_t index = i * cloud.width + j;
		    cloud.points[ index ].x = i * 0.035;
                    cloud.points[ index ].y = j * 0.035;
                 //   cloud.points[ index ].z = 0.1*cloud.points[ index ].y * sin(cloud.points[ index ].x) + 0.1*cloud.points[ index ].x*cos(cloud.points[ index ].y) + float(rand()%3000 -1500)/55000 ;
		       cloud.points[ index ].z = 0.1 + float(rand()%2000 -1000)/55000; 
                  }
              }

	      pcl::io::savePCDFileASCII("/home/x86isnice/0627_keypoints_with_filter/plane.pcd", cloud);
     
              return (0);
}
#else
int main(int argc,char ** argv)
{
      pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr (new pcl::PointCloud<pcl::PointXYZ> ());

     pcl::io::loadPCDFile<pcl::PointXYZ> ("/home/x86isnice/0627_keypoints_with_filter/outdata1.pcd", *cloud_ptr);

     for (size_t i = 0; i < cloud_ptr->points.size(); i++)
    {
      cloud_ptr->points[i].x = static_cast<float>(cloud_ptr->points[i].x/1000);
      cloud_ptr->points[i].y = static_cast<float>(cloud_ptr->points[i].y/1000);
      cloud_ptr->points[i].z = static_cast<float>(cloud_ptr->points[i].z/1000);
   }

   pcl::io::savePCDFileASCII("/home/x86isnice/0627_keypoints_with_filter/outdata1_o.pcd", *cloud_ptr);
}

#endif
